// Generated by CoffeeScript 2.0.2
(function() {
  var GameOfLife;

  GameOfLife = (function() {
    class GameOfLife {
      constructor() {
        this.tick = this.tick.bind(this);
        this.createCanvas();
        this.resizeCanvas();
        this.createDrawingContext();
        this.seed();
        this.tick();
      }

      createCanvas() {
        this.canvas = document.createElement('canvas');
        return document.body.appendChild(this.canvas);
      }

      resizeCanvas() {
        this.canvas.height = this.cellSize * this.numberOfRows;
        return this.canvas.width = this.cellSize * this.numberOfColumns;
      }

      createDrawingContext() {
        return this.drawingContext = this.canvas.getContext('2d');
      }

      seed() {
        var column, i, ref, results, row, seedCell;
        this.currentCellGeneration = [];
        results = [];
        for (row = i = 0, ref = this.numberOfRows; 0 <= ref ? i < ref : i > ref; row = 0 <= ref ? ++i : --i) {
          this.currentCellGeneration[row] = [];
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (column = j = 0, ref1 = this.numberOfColumns; 0 <= ref1 ? j < ref1 : j > ref1; column = 0 <= ref1 ? ++j : --j) {
              seedCell = this.createSeedCell(row, column);
              results1.push(this.currentCellGeneration[row][column] = seedCell);
            }
            return results1;
          }).call(this));
        }
        return results;
      }

      createSeedCell(row, column) {
        return {
          isAlive: Math.random() < this.seedProbability,
          row: row,
          column: column
        };
      }

      drawGrid() {
        var column, i, ref, results, row;
        results = [];
        for (row = i = 0, ref = this.numberOfRows; 0 <= ref ? i < ref : i > ref; row = 0 <= ref ? ++i : --i) {
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (column = j = 0, ref1 = this.numberOfColumns; 0 <= ref1 ? j < ref1 : j > ref1; column = 0 <= ref1 ? ++j : --j) {
              results1.push(this.drawCell(this.currentCellGeneration[row][column]));
            }
            return results1;
          }).call(this));
        }
        return results;
      }

      drawCell(cell) {
        var fillStyle, x, y;
        x = cell.column * this.cellSize;
        y = cell.row * this.cellSize;
        if (cell.isAlive) {
          fillStyle = 'rgb(242, 198, 65)';
        } else {
          fillStyle = 'rgb(38, 38, 38)';
        }
        this.drawingContext.strokeStyle = 'rgba(242, 198, 65, 0.1)';
        this.drawingContext.strokeRect(x, y, this.cellSize, this.cellSize);
        this.drawingContext.fillStyle = fillStyle;
        return this.drawingContext.fillRect(x, y, this.cellSize, this.cellSize);
      }

      tick() {
        this.drawGrid();
        this.evolveCellGeneration();
        return setTimeout(this.tick, this.tickLength);
      }

      evolveCellGeneration() {
        var column, evolvedCell, i, j, newCellGeneration, ref, ref1, row;
        newCellGeneration = [];
        for (row = i = 0, ref = this.numberOfRows; 0 <= ref ? i < ref : i > ref; row = 0 <= ref ? ++i : --i) {
          newCellGeneration[row] = [];
          for (column = j = 0, ref1 = this.numberOfColumns; 0 <= ref1 ? j < ref1 : j > ref1; column = 0 <= ref1 ? ++j : --j) {
            evolvedCell = this.evolveCell(this.currentCellGeneration[row][column]);
            newCellGeneration[row][column] = evolvedCell;
          }
        }
        return this.currentCellGeneration = newCellGeneration;
      }

      evolveCell(cell) {
        var evolvedCell, numberOfAliveNeighbors;
        evolvedCell = {
          row: cell.row,
          column: cell.column,
          isAlive: cell.isAlive
        };
        numberOfAliveNeighbors = this.countAliveNeighbors(cell);
        if (cell.isAlive || numberOfAliveNeighbors === 3) {
          evolvedCell.isAlive = (1 < numberOfAliveNeighbors && numberOfAliveNeighbors < 4);
        }
        return evolvedCell;
      }

      countAliveNeighbors(cell) {
        var column, i, j, lowerColumnBound, lowerRowBound, numberOfAliveNeighbors, ref, ref1, ref2, ref3, row, upperColumnBound, upperRowBound;
        lowerRowBound = Math.max(cell.row - 1, 0);
        upperRowBound = Math.min(cell.row + 1, this.numberOfRows - 1);
        lowerColumnBound = Math.max(cell.column - 1, 0);
        upperColumnBound = Math.min(cell.column + 1, this.numberOfColumns - 1);
        numberOfAliveNeighbors = 0;
        for (row = i = ref = lowerRowBound, ref1 = upperRowBound; ref <= ref1 ? i <= ref1 : i >= ref1; row = ref <= ref1 ? ++i : --i) {
          for (column = j = ref2 = lowerColumnBound, ref3 = upperColumnBound; ref2 <= ref3 ? j <= ref3 : j >= ref3; column = ref2 <= ref3 ? ++j : --j) {
            if (row === cell.row && column === cell.column) {
              continue;
            }
            if (this.currentCellGeneration[row][column].isAlive) {
              numberOfAliveNeighbors++;
            }
          }
        }
        return numberOfAliveNeighbors;
      }

    };

    GameOfLife.prototype.currentCellGeneration = null;

    GameOfLife.prototype.cellSize = 7;

    GameOfLife.prototype.numberOfRows = 50;

    GameOfLife.prototype.numberOfColumns = 50;

    GameOfLife.prototype.seedProbability = 0.5;

    GameOfLife.prototype.tickLength = 100;

    GameOfLife.prototype.canvas = null;

    GameOfLife.prototype.drawingContext = null;

    return GameOfLife;

  })();

  window.GameOfLife = GameOfLife;

}).call(this);
