// Generated by CoffeeScript 2.0.2
(function() {
  var GameOfLife;

  GameOfLife = (function() {
    var countNeighbors, getDistance;

    class GameOfLife {
      constructor() {
        this.tick = this.tick.bind(this);
        this.createCanvas();
        this.resizeCanvas();
        this.createDrawingContext();
        this.seed();
        this.tick();
      }

      createCanvas() {
        this.canvas = document.createElement('canvas');
        return document.body.appendChild(this.canvas);
      }

      resizeCanvas() {
        this.canvas.height = 700;
        return this.canvas.width = 700;
      }

      createDrawingContext() {
        return this.drawingContext = this.canvas.getContext('2d');
      }

      drawCircle(circle) {
        this.drawingContext.lineWidth = 2;
        this.drawingContext.strokeStyle = 'rgba(242, 198, 65, 0.1)';
        this.drawingContext.fillStyle = 'rgb(242, 198, 65)';
        this.drawingContext.beginPath();
        this.drawingContext.arc(circle.xPos, circle.yPos, circle.radius, 0, 2 * Math.PI, false);
        this.drawingContext.fill();
        return this.drawingContext.stroke();
      }

      createCircle(x, y, r) {
        return {
          xPos: x,
          yPos: y,
          radius: r,
          alive: true
        };
      }

      createSeedCircle() {
        return this.createCircle(this.canvas.width * Math.random(), this.canvas.height * Math.random(), 3);
      }

      seed() {
        var i, node, ref, results;
        this.nodeArray = [];
        results = [];
        for (node = i = 0, ref = this.initialnodes; 0 <= ref ? i < ref : i > ref; node = 0 <= ref ? ++i : --i) {
          results.push(this.nodeArray[node] = this.createSeedCircle());
        }
        return results;
      }

      draw() {
        var i, len, node, ref, results;
        ref = this.nodeArray;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          node = ref[i];
          if (node.alive === true) {
            results.push(this.drawCircle(node));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }

      tick() {
        this.drawingContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.draw();
        this.evolve();
        this.cull();
        return setTimeout(this.tick, this.tickLength);
      }

      evolve() {
        var i, len, neighborCount, newArray, node, ref;
        newArray = this.nodeArray;
        ref = this.nodeArray;
        for (i = 0, len = ref.length; i < len; i++) {
          node = ref[i];
          neighborCount = countNeighbors(node, this.nodeArray, this.adjacentDistance);
          if (neighborCount === 1) {
            this.reproduce(node, newArray);
          }
        }
        return this.nodeArray = newArray;
      }

      cull() {
        var i, index, len, neighborCount, newArray, node;
        newArray = this.nodeArray;
        for (i = 0, len = newArray.length; i < len; i++) {
          node = newArray[i];
          neighborCount = countNeighbors(node, newArray, this.adjacentDistance);
          if (neighborCount === 0) {
            if (Math.random() < 0.10) {
              node.alive = false;
            }
          }
          if (neighborCount > 2) {
            node.alive = false;
          }
        }
        index = newArray.length - 1;
        while (index >= 0) {
          if (newArray[index].alive === false) {
            newArray.splice(index, 1);
            index--;
          }
          index--;
        }
        return this.nodeArray = newArray;
      }

      reproduce(node, array) {
        var newCircle, newX, newY;
        newX = (0.5 * Math.random()) * this.adjacentDistance * 10 + node.xPos;
        newY = (0.5 * Math.random()) * this.adjacentDistance * 10 + node.yPos;
        if (newX > this.canvas.width) {
          newX = this.canvas.width;
        }
        if (newY > this.canvas.height) {
          newY = this.canvas.height;
        }
        newCircle = this.createCircle(newX, newY, node.radius);
        return array.push(newCircle);
      }

    };

    GameOfLife.prototype.nodeArray = null;

    GameOfLife.prototype.canvasheight = 700;

    GameOfLife.prototype.canvaswidth = 700;

    GameOfLife.prototype.initialnodes = 50;

    GameOfLife.prototype.adjacentDistance = 20;

    GameOfLife.prototype.tickLength = 100;

    GameOfLife.prototype.canvas = null;

    GameOfLife.prototype.drawingContext = null;

    getDistance = function(a, b) {
      var sumOfSquares, xdiff, ydiff;
      xdiff = b.xPos - a.xPos;
      ydiff = b.yPos - a.yPos;
      sumOfSquares = Math.pow(xdiff, 2) + Math.pow(ydiff, 2);
      return Math.sqrt(sumOfSquares);
    };

    countNeighbors = function(node, array, distance) {
      var count, d, i, len, x;
      count = 0;
      for (i = 0, len = array.length; i < len; i++) {
        x = array[i];
        d = getDistance(node, x);
        if (d < distance && d > 0) {
          count++;
        }
      }
      return count;
    };

    return GameOfLife;

  })();

  window.GameOfLife = GameOfLife;

}).call(this);
